rebol [
	title: "Image to BitLossless - Rebol/View version < 1.2.8 !"
	file: %img-to-bll.r
	author: "oldes"
	email: oliva.david@seznam.cz
	date: 05-11-2002
	history: [
		05-11-2002 {Fixed bug in compression}
		26-06-2002 {Fixed compression}
		3-Apr-2002 {Fixed bug in key-masking}
	]
	purpose: {Converts any image to Flash bitmap (bitLossless) format}
	comment: {It's not so fast but it's working fine:=)}
	note: {
	1. You must use Rebol/View!
	2. Probably still not bug free (but what is anyway:-)
	3. This version works only for up to 255 colors per image!!!
	4. If you are using Rebol/view >= 1.2.8 use the %img-to-bll2.r script!!!
	}
]

img-to-bll: func[
	{Converts any image to Flash bitmap (bitLossless) format}
	img	[file! url! image!] "Image to convert"
	/alpha transp	"If you want to create alpha version"
	/mask maskimg	"Image that contains mask information"
	/key key-color	"If you need some color to be transparent"
	/local x szx szy i color colors BitmapPixelData ColorTableRGB get-color-id
][
	if key [key-color: to-binary key-color]
	if not image? img [img: load-image img]
	if mask [
		if not image? maskimg [maskimg: load-image maskimg]
		if maskimg/size <> img/size [
			print "Size of the image and its mask must be same!"
			halt
		]
	]
	set [szx szy] reduce [img/size/x img/size/y]
	colors: make hash! szx * szy
	w: szx while [(w // 4) > 0][w: w + 1] w: w - szx
	BitmapPixelData: make binary! 4 * (szx + w) * szy
	get-color-id: func [color /local i f][
		i: either found? f: find colors color [
			index? f
		][
			insert tail colors color
			length? colors
		]
		i: int-to-ui8 (i - 1)
	]
	x: 1
	c: 1
	pix: szx * szy
	while [c <= pix] [
		color: to-binary img/:c
		if alpha [insert tail color transp]
		either mask [
			insert tail color to-binary to-char first maskimg/:c
		][
			if key [
				either color = key-color [
					color: #{00000000}
				][insert tail color #{FF}]
			]
		]
		
		i: get-color-id color
		insert tail BitmapPixelData i
		either x = szx [
			if any [alpha key mask][i: get-color-id #{00000000}]
			insert/dup tail BitmapPixelData i w
			x: 1
		][	x: x + 1]
		c: c + 1
	]
;probe length? colors
	ColorTableRGB: rejoin to-block colors
	
	rejoin [
		int-to-ui8 3 ;BitmapFormat
		int-to-ui16 szx ;(szx + w) ;BitmapWidth
		int-to-ui16 szy ;BitmapHeight
		int-to-ui8 (length? colors) - 1 ;BitmapColorTableSize
		head remove/part tail (compress join ColorTableRGB BitmapPixelData) -4 ;ZLIBBITMAPDATA
	]
]

;write/binary %bitmaps/strom2.gif.36 img-to-bll/key %/e/rbox2/img/strom2.gif 123.109.57